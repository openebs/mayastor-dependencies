syntax = "proto3";

package mayastor.v1;

import "google/protobuf/empty.proto";
import "registration.proto";

service HostRpc {

  rpc GetMayastorInfo (google.protobuf.Empty) returns (MayastorInfoResponse) {}

  // Enumerate block devices on current host
  rpc ListBlockDevices (ListBlockDevicesRequest) returns (ListBlockDevicesResponse) {}

  // Obtain resource usage statistics for the current process
  rpc GetMayastorResourceUsage (google.protobuf.Empty) returns (GetMayastorResourceUsageResponse) {}

  // NVMe controllers
  rpc ListNvmeControllers (google.protobuf.Empty) returns (ListNvmeControllersResponse) {}
  rpc StatNvmeController (StatNvmeControllerRequest) returns (StatNvmeControllerResponse) {}
}

message BackCompatMayastorFeatures {
  // NVMe ANA enablement status.
  bool asymmetricNamespaceAccess = 1;
}

message MayastorInfoResponse {
  string version = 1;
  BackCompatMayastorFeatures previous_features = 2;
  RegisterRequest  registration_info = 3;
}

message BlockDevice {
  message Partition {
    string parent = 1;          // devname of parent device to which this partition belongs
    uint32 number = 2;          // partition number
    string name = 3;            // partition name
    string scheme = 4;          // partition scheme: gpt, dos, ...
    string typeid = 5;          // partition type identifier
    string uuid = 6;            // UUID identifying partition
  }
  message Filesystem {
    string fstype = 1;          // filesystem type: ext3, ntfs, ...
    string label = 2;           // volume label
    string uuid = 3;            // UUID identifying the volume (filesystem)
    repeated string mountpoints = 4;      // paths where filesystem is currently mounted
  }
  string devname = 1;           // entry in /dev associated with device
  string devtype = 2;           // currently "disk" or "partition"
  uint32 devmajor = 3;          // major device number
  uint32 devminor = 4;          // minor device number
  string model = 5;             // device model - useful for identifying mayastor devices
  string devpath = 6;           // official device path
  repeated string devlinks = 7; // list of udev generated symlinks by which device may be identified
  uint64 size = 8;              // size of device in (512 byte) blocks
  Partition partition = 9;      // partition information in case where device represents a partition
  Filesystem filesystem = 10;   // filesystem information in case where a filesystem is present
  bool available = 11;          // identifies if device is available for use (ie. is not "currently" in use)
  string connection_type = 12;   // the type of bus through which the device is connected to the system
  optional bool is_rotational = 13;     // indicates whether the device is rotational or non-rotational
}

message ListBlockDevicesRequest {
  bool all = 1;                 // list "all" block devices found (not just "available" ones)
}

message ListBlockDevicesResponse {
  repeated BlockDevice devices = 1;
}

message ResourceUsage {
  int64 soft_faults = 1;        // page reclaims (soft page faults)
  int64 hard_faults = 2;        // hard page faults
  int64 swaps = 3;              // swaps
  int64 in_block_ops = 4;       // input block operations
  int64 out_block_ops = 5;      // output block operations
  int64 ipc_msg_send = 6;       // IPC messages sent
  int64 ipc_msg_rcv = 7;        // IPC messages received
  int64 signals = 8;            // signals received
  int64 vol_csw = 9;            // voluntary context switches
  int64 invol_csw = 10;         // involuntary context switches
}

message GetMayastorResourceUsageResponse {
  ResourceUsage usage = 1;
}

enum NvmeControllerState {
  NEW = 0;
  INITIALIZING = 1;
  RUNNING = 2;
  FAULTED = 3;
  UNCONFIGURING = 4;
  UNCONFIGURED = 5;
}

message NvmeControllerIoStats {
  uint64 num_read_ops = 1;
  uint64 num_write_ops = 2;
  uint64 bytes_read = 3;
  uint64 bytes_written = 4;
  uint64 num_unmap_ops = 5;
  uint64 bytes_unmapped = 6;
}

message NvmeController {
  string name = 1;               // NVMe controller name
  NvmeControllerState state = 2; // Current state of the NVMe controller
  uint64 size = 3;               // Size of the controller's namespace (0 if no namespace attached).
  uint32 blk_size = 4;           // Block size of the namespace (0 if no namespace attached).
}

message ListNvmeControllersResponse {
  repeated NvmeController controllers = 1;
}

message StatNvmeControllerRequest {
  string name = 1;
}

message StatNvmeControllerResponse {
  NvmeControllerIoStats stats = 1; // Controller I/O statistics
}