
syntax = "proto3";

import "google/protobuf/empty.proto";
import "google/protobuf/wrappers.proto";

package mayastor.v1;

service PoolRpc {
  // Storage pool related methods.
  //
  // Storage pool is made up of block devices disks and provides a storage
  // space for provisioning of replicas.
  rpc CreatePool (CreatePoolRequest) returns (Pool) {}
  rpc DestroyPool (DestroyPoolRequest) returns (google.protobuf.Empty) {}
  rpc ExportPool (ExportPoolRequest) returns (google.protobuf.Empty) {}
  rpc ImportPool (ImportPoolRequest) returns (Pool) {}
  rpc ListPools (ListPoolOptions) returns (ListPoolsResponse) {}
  rpc GrowPool (GrowPoolRequest) returns (GrowPoolResponse) {}
}

// Specifies the type of the pool
enum PoolType {
  Lvs = 0;  // pool backed by spdk lvs
  Lvm = 1;  // pool backed by lvm vg
}

// The wrapper for pooltype.
// It helps in defining optional fields
// when required.
message PoolTypeValue {
  PoolType value = 1;
}

// Create pool arguments.
message CreatePoolRequest {
  // Name of the pool.
  string name = 1;
  // Optional uuid for the pool to be created.
  google.protobuf.StringValue uuid = 2;
  // Disk device paths or URIs to be claimed by the pool.
  repeated string disks = 3;
  // Type of the pool.
  PoolType pooltype = 4;
  // Default cluster size is 4MiB (4 * 1024 * 1024), input cluster size must be in "bytes" but
  // must be multiple of 1MiB, else default cluster size i.e 4MiB will be considered. Minimum
  // cluster size can be input as 1048576 (1024 * 1024) bytes (1MiB)
  optional uint32 cluster_size = 5;
  // Optional pool metadata arguments.
  optional PoolMetadataArgs md_args = 6;
}

// Pool metadata arguments.
message PoolMetadataArgs {
  // This parameter controls the initial metadata reservation for a storage pool.
  // This parameter sets a ratio of the desired metadata reservation amount
  // to the default reservation for the given pool type.
  //
  // 1.0 is the default value, and it means to reserve the amount
  // of disk space for metadata which is default for the pool type.
  //
  // Values larger that 1.0 would increase amount of space reserved for metadata.
  // For example, 2.0 would double the capacity reserved for metadata.
  //
  // Values smaller that 1.0 would decrease amount of space reserved for metadata.
  // For example, 0.5 would half the capacity reserved for metadata.
  //
  // The actual amount of disk space in bytes reserved for metadata may
  // depend on pool size, cluster size, and other pool parameters.
  // A pool backend may also allow dynamic metadata allocation.
   optional float md_resv_ratio = 1;
}

// Create pool arguments.
message ImportPoolRequest {
  string name = 1;           // name of the pool
  google.protobuf.StringValue uuid = 2; // optional uuid for the pool to be imported
  repeated string disks = 3; // disk device paths or URIs to be claimed by the pool
  PoolType pooltype = 4;     // type of the pool
}

// State of the storage pool (terminology comes from ZFS).
enum PoolState {
  POOL_UNKNOWN = 0;
  POOL_ONLINE = 1;   // the pool is in normal working order
  POOL_DEGRADED = 2; // the pool has experienced a failure but can still function
  POOL_FAULTED = 3;  // the pool is completely inaccessible
}

// Storage pool properties
message Pool {
  // UUID of the storage pool.
  string uuid = 1;
  // Name of the storage pool.
  string name = 2;
  // Absolute path(s) of disk devices which are claimed by the pool.
  repeated string disks = 3;
  // Current state of the storage pool.
  PoolState state = 4;
  // Pool capacity in bytes available for user data.
  uint64 capacity = 5;
  // Storage capacity in bytes allocated for storing user data.
  uint64 used = 6;
  // Type of the pool.
  PoolType pooltype = 7;
  // Committed size of all pool's replicas: a sum of capacities of all replicas.
  uint64 committed = 8;
  // Cluster size in bytes. It defines the allocation granularity for replicas
  // and snapshots. Cluster size can set during pool creation.
  uint32 cluster_size = 9;
  // Page size in bytes. This is the write and read granularity.
  optional uint32 page_size = 10;
  // Usable capacity of the pool's underlying storage device(s).
  // It changes when the device's capacity changes.
  // This value is equal or large than the current pool capacity. If it is larger,
  // pool can be grown to fill the entire device's capacity.
  // If the pool backend does not support disk capacity evaluation, zero is returned.
  uint64 disk_capacity = 11;
  // Optional pool metadata info.
  optional PoolMetadataInfo md_info = 12;
}

// Pool medata info.
message PoolMetadataInfo {
  // Size of metadata allocation page in bytes.
  uint32 md_page_size = 1;
  // Number of metadata pages reserved on the pool for storing replica metadata.
  // Metadata reservation capacity can be a limiting factor for the number
  // of replicas and snaphots a pool can accommodate.
  // Depending on the pool backend, this value can be defined on pool creation,
  // or can dynamically change.
  // If the pool backend does not support metadata capacity evaluation, zero is returned.
  uint64 md_pages = 2;
  // Number of metadata pages used for storing metadata for the currently
  // existing replicas.
  // If the pool backend does not support metadata capacity evaluation, zero is returned.
  uint64 md_used_pages = 3;
}

// Destroy pool arguments.
message DestroyPoolRequest {
  string name = 1;  // name of the pool
  google.protobuf.StringValue uuid = 2; // optional uuid for the pool to be destroyed
}

// Export pool arguments.
message ExportPoolRequest {
  string name = 1;  // name of the pool
  google.protobuf.StringValue uuid = 2; // optional uuid for the pool to be exported
}

// List of pools and their properties.
message ListPoolsResponse {
  repeated Pool pools = 1;  // list of the pools
}

message ListPoolOptions {
  google.protobuf.StringValue name = 1; // list the pools matching the name if provided
  PoolTypeValue pooltype = 2; // optional pooltype filter
  google.protobuf.StringValue uuid = 3; // get the pool matching the uuid if provided
}

// Grow pool arguments.
message GrowPoolRequest {
  string name = 1;                        // name of the pool
  google.protobuf.StringValue uuid = 2;   // optional uuid for the pool to be grown
}

// Grow pool response.
message GrowPoolResponse {
  // Pool's state before expansion.
  Pool previous_pool = 1;
  // Pool's state after expansion.
  // The difference between previous_pool and current_pool can be used
  // to determine how much the pool has grown, and if the growth
  // actually occurred.
  Pool current_pool = 2;
}
