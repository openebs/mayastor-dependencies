syntax = "proto3";

import "google/protobuf/wrappers.proto";

import "google/protobuf/timestamp.proto";

import "google/protobuf/duration.proto";

package v1.event;

// Event Message
message EventMessage {
    // Event category
    EventCategory category = 1;
    // Event action
    EventAction action = 2;
    // Target id for the category against which action is performed
    string target = 3;
    // Event meta data
    EventMeta metadata = 4;
}

// Event Category
enum EventCategory {
  UnknownCategory = 0;
  Pool = 1;
  Volume = 2;
  Nexus = 3;
  Replica = 4;
  Node = 5;
  HighAvailability = 6;
  NvmePath = 7;
  HostInitiator = 8;
  IoEngineCategory = 9;
  Snapshot = 10;
  Clone = 11;
}

// Event Action
enum EventAction {
  UnknownAction = 0;
  Create = 1;
  Delete = 2;
  StateChange = 3;
  RebuildBegin = 4;
  RebuildEnd = 5;
  SwitchOver = 6;
  AddChild = 7;
  RemoveChild = 8;
  NvmePathSuspect = 9;
  NvmePathFail = 10;
  NvmePathFix = 11;
  OnlineChild = 12;
  NvmeConnect = 13;
  NvmeDisconnect = 14;
  NvmeKeepAliveTimeout = 15;
  ReactorFreeze = 16;
  ReactorUnfreeze = 17;
  Shutdown = 18;
  Start = 19;
  Stop = 20;
  SubsystemPause = 21;
  SubsystemResume = 22;
  Init = 23;
  Reconfiguring = 24;
  NvmePathDeleting = 25;
}

// Event meta data
message EventMeta {
    // Something that uniquely identifies events. UUIDv4. GUID.
    string id = 1;
    EventSource source = 2;
    // Event timestamp
    google.protobuf.Timestamp timestamp = 3;
    // Version of the event message
    Version version = 4;
}

// Event source
message EventSource {
  // Io-engine or core-agent
  Component component = 1;
  // Node name
  string node = 2;
  // Event specific details
  optional EventDetails event_details = 3;
}

// Source Component
enum Component {
  UnknownComponent = 0;
  CoreAgent = 1;
  IoEngine = 2;
  HaClusterAgent = 3;
  HaNodeAgent = 4;
}

// Event message version
enum Version {
  UnknownVersion = 0;
  V1 = 1;
}

// Event specific details
message EventDetails {
  // Rebuild event details
  optional RebuildEventDetails rebuild_details = 1;
  // Replica event details
  optional ReplicaEventDetails replica_details = 2;
  // HA switch over event details
  optional SwitchOverEventDetails switch_over_details = 3;
  // Nexus child event details
  optional NexusChildEventDetails nexus_child_details = 4;
  // Nvme path event details
  optional NvmePathEventDetails nvme_path_details = 5;
  // Host initiator event details
  optional HostInitiatorEventDetails host_initiator_details = 6;
  // Reactor event details
  optional ReactorEventDetails reactor_details = 7;
  // State change event details
  optional StateChangeEventDetails state_change_details = 8;
  // Event action duration details
  optional EventActionDuration action_duration_details = 9;
  // Snapshot event details
  optional SnapshotEventDetails snapshot_details = 10;
  // Clone event details
  optional CloneEventDetails clone_details = 11;
  // Error details
  optional ErrorDetails error_details = 12;
  // Subsystem pause details
  optional SubsystemPauseDetails subsystem_pause_details = 13;
}

// Rebuild event details
message RebuildEventDetails {
  // Rebuild status
  RebuildStatus rebuild_status = 1;
  // Rebuild source replica uri
  string source_replica = 2;
  // Rebuild destination replica uri
  string destination_replica = 3;
  // Rebuild error for RebuildFail event
  optional string error = 4;
}

// Rebuild status
enum RebuildStatus {
  // Unknown
  Unknown = 0;
  // Rebuild started
  Started = 1;
  // Rebuild is completed successfully
  Completed = 2;
  // Rebuild is stopped
  Stopped = 3;
  // Rebuild failed
  Failed = 4;
}

// Replica event details
message ReplicaEventDetails {
  // Pool name
  string pool_name = 1;
  // Pool uuid
  string pool_uuid = 2;
  // Replica name
  string replica_name = 3;
}

// HA switch over event details
message SwitchOverEventDetails {
  // Switch over status
  SwitchOverStatus switch_over_status = 1;
  // Timestamp when switchover request was initialized
  optional google.protobuf.Timestamp start_time = 2;
  // Failed nexus path of the volume
  string existing_nqn = 3;
  // New nexus path of the volume
  optional string new_path = 4;
  // Number of failed attempts in the current Stage
  uint64 retry_count = 5;
}

// Switch over status
enum SwitchOverStatus {
  // Unknown
  UnknownSwitchOverStatus = 0;
  // Switch over started
  SwitchOverStarted = 1;
  // Switch over is completed successfully
  SwitchOverCompleted = 2;
  // Switch over failed
  SwitchOverFailed = 3;
}

// Nexus child event details
message NexusChildEventDetails {
  // Nexus child uri
  string uri = 1;
}

// Nvme path event details
message NvmePathEventDetails {
  string nqn = 1;
  string path = 2;
}

// Host initiator event details
message HostInitiatorEventDetails {
  string host_nqn = 1;
  string subsystem_nqn = 2;
  // The target on which the host is connected to the subsystem - Nexus/Replica
  string target = 3;
  // Target uuid
  string uuid = 4;
}

// State change event details
message StateChangeEventDetails {
  string previous = 1;
  string next = 2;
}

// Reactor event details
message ReactorEventDetails {
  // The logical core this reactor is created on
  uint64 lcore = 1;
  // Reactor state
  string state = 2;
}

// Event action duration details
message EventActionDuration {
  // Total time taken for the action to complete
  google.protobuf.Duration time_taken = 1;
}

// Error details
message ErrorDetails {
  string error = 1;
}

// Subsystem pause details
message SubsystemPauseDetails {
  // Nexus pause state
  string nexus_pause_state = 1;
}

// Snapshot event details
message SnapshotEventDetails {
  // Parent id of the snapshot
  string replica_id = 1;
  // Snapshot creation time
  string create_time = 2;
  // Entity id of the snapshot
  string volume_id = 3;
}

// Clone event details
message CloneEventDetails {
  // Source uuid from which clone is created
  string source_uuid = 1;
  // Clone creation time
  string create_time = 2;
}
